name: Cleanup Old Docker Images

on:
  schedule:
    - cron: '0 0 * * *'  # This sets the workflow to run nightly at midnight UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker CLI and jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    - name: List and delete old Docker images
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        REPO: stellarhub/dev-target
      run: |
        set -e

        # Function to fetch all tags with pagination
        fetch_tags() {
          local repo=$1
          local username=$2
          local token=$3
          local page=1
          local per_page=100
          local tags=()

          while true; do
            response=$(curl -s -u $username:$token "https://hub.docker.com/v2/repositories/${repo}/tags/?page=${page}&page_size=${per_page}")
            echo "Response: $response"  # Log the response for debugging

            # Check if the response contains errors
            if echo "$response" | jq -e '.errors' > /dev/null; then
              echo "Error fetching tags: $(echo $response | jq '.errors')"
              exit 1
            fi

            new_tags=$(echo $response | jq -r '.results | select(. != null) | .[].name')
            
            if [ -z "$new_tags" ]; then
              break
            fi

            tags+=($new_tags)
            page=$((page + 1))
          done

          echo "${tags[@]}"
        }

        # Fetch all tags
        images=$(fetch_tags $REPO $DOCKER_USERNAME $DOCKER_ACCESS_TOKEN)
        
        if [ -z "$images" ]; then
          echo "No images found in the repository."
          exit 0
        fi
        
        echo "Fetched image tags: $images"
        
        # Get the current date in seconds
        current_date=$(date +%s)
        
        for image in $images; do
          # Get the image details
          image_info=$(curl -s -u $DOCKER_USERNAME:$DOCKER_ACCESS_TOKEN "https://hub.docker.com/v2/repositories/${REPO}/tags/${image}/")
          
          # Check if the image details request was successful
          if echo "$image_info" | grep -q '"message":"httperror 404:'; then
            echo "Image $image not found, skipping..."
            continue
          fi
          
          echo "Fetched details for image: $image"

          # Get the creation date of the image in seconds
          created_date=$(echo $image_info | jq -r '.last_updated')

          if [ "$created_date" == "null" ] || [ -z "$created_date" ]; then
            echo "Image $image has an invalid date, skipping..."
            continue
          fi

          created_date=$(date -d "$created_date" +%s 2>/dev/null || echo "null")
          if [ "$created_date" == "null" ]; then
            echo "Image $image has an invalid date format, skipping..."
            continue
          fi
          echo "Image $image was created on $(date -d @$created_date)"

          # Calculate the age of the image in hours
          age_hours=$(( (current_date - created_date) / 3600 ))
          echo "Image $image is $age_hours hours old"

          # Delete the image if it is older than 5 hours
          if [ $age_hours -gt 5 ]; then
            delete_response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -u $DOCKER_USERNAME:$DOCKER_ACCESS_TOKEN "https://hub.docker.com/v2/repositories/${REPO}/tags/${image}/")
            if [ "$delete_response" -eq 204 ]; then
              echo "Deleted image: $image (age: $age_hours hours)"
            else
              echo "Failed to delete image: $image (HTTP status: $delete_response)"
            fi
          fi
        done
