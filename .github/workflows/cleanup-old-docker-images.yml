name: Cleanup Old Docker Images

on:
  schedule:
    - cron: '0 0 * * *'  # This sets the workflow to run nightly at midnight UTC
  workflow_dispatch:  # Allows manual triggering
    inputs:
      age:
        description: 'age in hours to delete'
        required: true
        default: '5'
jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

#    - name: Authenticate with GitHub Container Registry
#      run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    - name: List and delete old Docker images
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        REPO: stellarhub/dev-target
      run: |
        # Function to fetch all tags with pagination
        fetch_tags() {
          local repo=$1
          local token=$2
          local page=1
          local per_page=100
          local tags=()
          local age=${{ github.event.inputs.age }}

          while true; do
            response=$(curl -s -H "Authorization: Bearer $token" "https://ghcr.io/v2/${repo}/tags/list?n=${per_page}&page=${page}")
            new_tags=$(echo $response | jq -r '.tags | select(. != null) | .[]')
            
            if [ -z "$new_tags" ]; then
              break
            fi

            tags+=($new_tags)
            page=$((page + 1))
          done

          echo "${tags[@]}"
        }

        # Fetch all tags
        images=$(fetch_tags $REPO $DOCKER_ACCESS_TOKEN)
        
        if [ -z "$images" ]; then
          echo "No images found in the repository."
          exit 0
        fi
        
        echo "Fetched image tags: $images"
        
        # Get the current date in seconds
        current_date=$(date +%s)
        
        for image in $images; do
          # Get the image details
          image_info=$(curl -s -H "Authorization: Bearer $DOCKER_ACCESS_TOKEN" "https://ghcr.io/v2/${REPO}/manifests/$image")
          echo "Fetched details for image: $image"
          
          # Get the creation date of the image in seconds
          created_date=$(echo $image_info | jq -r '.history[0].v1Compatibility' | jq -r '.created' | xargs -I{} date -d {} +%s)
          echo "Image $image was created on $(date -d @$created_date)"

          # Calculate the age of the image in days
          age_days=$(( (current_date - created_date) / 86400 ))
          age_hours=$(( (current_date - created_date) / 3600 ))
          echo "Image $image is $age_days days old"

          # Delete the image if it is older than 60 days (2 months)
          # if [ $age_days -gt 60 ]; then
          if [ $age_hours -gt age ]; then
            digest=$(curl -sI -H "Authorization: Bearer $DOCKER_ACCESS_TOKEN" "https://ghcr.io/v2/${REPO}/manifests/$image" | grep Docker-Content-Digest | awk '{print $2}')
            curl -X DELETE -H "Authorization: Bearer $DOCKER_ACCESS_TOKEN" "https://ghcr.io/v2/${REPO}/manifests/${digest//[$'\t\r\n']}"
            # echo "Deleted image: $image (age: $age_days days)"
            echo "Deleted image: $image (age: $age_hours hours)"
          fi
        done
